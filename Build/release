#!/bin/bash

# Ask for version number
read -p "Enter the version number: " version
release_folder="releases/curd-$version"
windows_folder="$release_folder/windows"
linux_folder="$release_folder/linux"
macos_folder="$release_folder/macos"
installer_script="Build/curd-windows-build.iss"

# Ensure required directories exist
mkdir -p "$windows_folder" "$linux_folder" "$macos_folder"

# Build Linux binary
echo "Building Linux binary..."
bash Build/buildlinux

# Move the Linux binary to the release folder
if [ -f "curd-linux-x86_64" ]; then
    mv curd-linux-x86_64 "$linux_folder"
else
    echo "Linux build failed. Please check Build/buildlinux."
    exit 1
fi

if [ -f "curd-linux-arm64" ]; then
    mv curd-linux-arm64 "$linux_folder"
else
    echo "Linux build failed. Please check Build/buildlinux-arm64."
    exit 1
fi

# Build macOS binaries
echo "Building macOS binaries..."
bash Build/buildmac
if [ -f "curd-macos-x86_64" ]; then
    mv curd-macos-x86_64 "$macos_folder"
else
    echo "macOS x86-64 build failed. Please check Build/buildmac-x86_64."
    exit 1
fi

if [ -f "curd-macos-arm64" ]; then
    mv curd-macos-arm64 "$macos_folder"
else
    echo "macOS arm64 build failed. Please check Build/buildmac-arm64."
    exit 1
fi

# Create Universal binary for macOS
echo "Creating macOS Universal binary..."
llvm-lipo -create "$macos_folder/curd-macos-x86_64" "$macos_folder/curd-macos-arm64" -output "$macos_folder/curd-macos-universal"
# rm "$macos_folder/curd-macos-x86_64" "$macos_folder/curd-macos-arm64"

if [ ! -f "$macos_folder/curd-macos-universal" ]; then    
    echo "macOS arm64 build failed. Please check Build/buildmac."
    exit 1
fi

# Update version in the installer script
sed -i "s/^AppVersion=.*/AppVersion=$version/" "$installer_script"

# Build Windows binary
echo "Building Windows binary..."
bash Build/buildwindows

# Uncompress mpv.exe.gz
echo "Uncompressing mpv.exe..."
mkdir -p "Build/mpv"
gunzip -c Build/mpv.exe.gz > "Build/mpv/mpv.exe"

# Move the Windows binary to the release folder
if [ -f "curd-windows-x86_64.exe" ]; then
    mv curd-windows-x86_64.exe "$windows_folder"
else
    echo "Windows build failed. Please check Build/buildwindows-x86_64."
    exit 1
fi

# NOTE: Broken due to npipe and rich-go
# if [ -f "curd-windows-arm64.exe" ]; then
#     mv curd-windows-arm64.exe "$windows_folder"
# else
#     echo "Windows build failed. Please check Build/buildwindows-arm64."
#     exit 1
# fi

# Create Windows installer with Inno Setup
echo "Creating Windows installer..."
wine "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" "$installer_script"

# Move installer to the release folder
installer_output="Build/Output/curd-windows-installer.exe"
if [ -f "$installer_output" ]; then
    mv "$installer_output" "$windows_folder"
else
    echo "Installer creation failed. Please check Inno Setup script output."
fi

rm "Build/mpv/mpv.exe"

echo "Release build completed in $release_folder."
