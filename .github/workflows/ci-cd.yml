name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Trigger on pushes to the main branch
  pull_request:
    branches:
      - main  # Trigger on pull requests targeting the main branch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.23.2'

      - name: Install Dependencies
        run: go mod tidy

      - name: Build Linux binary
        run: |
          ./Build/buildlinux

      - name: Build macOS Intel binary
        run: |
          ./Build/buildmac

      - name: Build macOS ARM64 binary
        run: |
          ./Build/buildmac-arm64

      - name: Create Universal macOS binary
        run: |
          mkdir -p Build/macos
          mv curd Build/macos/curd-amd64
          mv curd-arm64 Build/macos/curd-arm64
          lipo -create Build/macos/curd-amd64 Build/macos/curd-arm64 -output Build/macos/curd
          rm Build/macos/curd-amd64 Build/macos/curd-arm64

      - name: Revert Changes in player.go
        run: |
          git checkout -- internal/player.go

      - name: Build Windows binary (cross-compile)
        run: |
          ./Build/buildwindows

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: curd-binaries
          path: |
            Build/curd
            Build/curd.exe
            Build/macos/curd
          retention-days: 1
          if-no-files-found: error

      - name: List Build Directory
        run: |
          echo "Listing contents of Build directory:"
          ls -R Build

  release:
    runs-on: windows-latest  # Use Windows runner for creating the installer
    needs: build  # Ensure the build job is complete before running this job
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'  # Only run on pushes to main

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          lfs: true

      - name: Download and extract MPV binary
        run: |
          # Create directory if it doesn't exist
          New-Item -ItemType Directory -Force -Path "Build\mpv"
          # Download the compressed MPV binary
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/${{ github.repository }}/main/Build/mpv.exe.gz" -OutFile "Build\mpv\mpv.exe.gz"
          # Extract using 7-Zip (built into Windows runners)
          7z x "Build\mpv\mpv.exe.gz" -o"Build\mpv"
          Remove-Item "Build\mpv\mpv.exe.gz"
        shell: pwsh

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: curd-binaries
          path: Build
          repository: ${{ github.repository }}  # Explicitly set repository
          github-token: ${{ secrets.GITHUB_TOKEN }}  # Add token for authentication

      - name: Bump Version
        id: bump_version
        run: |
          $current_version = Get-Content VERSION.txt
          $version_parts = $current_version -split '\.'
          $major = $version_parts[0]
          $minor = $version_parts[1]
          $patch = [int]$version_parts[2] + 1
          $new_version = "$major.$minor.$patch"
          $new_version | Set-Content VERSION.txt
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add VERSION.txt
          git commit -m "Bump version to $new_version"
          git tag "v$new_version"
          echo "::set-output name=new_version::$new_version"

      - name: Update Inno Setup Script with New Version
        run: |
          $new_version = Get-Content VERSION.txt
          $iss_path = "Build/curd-windows-build.iss"
          (Get-Content $iss_path) -replace "AppVersion=.*", "AppVersion=$new_version" | Set-Content $iss_path
  
      - name: Create Windows Installer
        run: |
          & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" "Build\curd-windows-build.iss"  
        shell: pwsh

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v${{ steps.bump_version.outputs.new_version }}"  # Use the bumped version as tag
          name: "Curd v${{ steps.bump_version.outputs.new_version }}"  # Use new version in release name
          draft: false
          prerelease: false
          generate_release_notes: true 
          files: |
            Build/curd
            Build/curd.exe
            Build/macos/curd
            Build/Output/CurdInstaller.exe
        env:
          GITHUB_TOKEN: ${{ secrets.ACTIONS_PAT }}
